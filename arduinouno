#include <Servo.h>

Servo x, y;
const int width = 640, height = 480;  // Videoresoluution koko
int xpos = 90, ypos = 90;            // Alkupiste molemmille servoille

const int triggerPin = 11;          // L√§ht√∂ pinni 11
const int lockThreshold = 30;       // Kuinka tarkasti keskitys vaaditaan (suurempi arvo helpottaa lukitusta)
bool locked = false;                // Lukitusstatus

void setup() {
    Serial.begin(9600);
    x.attach(9);
    y.attach(10);

    pinMode(triggerPin, OUTPUT);
    digitalWrite(triggerPin, LOW);  // Alustetaan laukaisu pois p√§√§lt√§

    x.write(xpos);
    y.write(ypos);
}

const int angle = 1; // Servo-askeleen koko
unsigned long lastTriggerTime = 0;  // Est√§√§ liian tihe√§n laukaisun
const int triggerCooldown = 2000;   // V√§himm√§isv√§li laukaisujen v√§lill√§ (ms)

void loop() {
    if (Serial.available() > 0) {
        int x_mid = -1, y_mid = -1;  // Oletusarvo, joka est√§√§ virhetulkinnan

        if (Serial.read() == 'X') {
            x_mid = Serial.parseInt();
            if (Serial.read() == 'Y')
                y_mid = Serial.parseInt();
        }

        // Jos koordinaatit ovat kunnossa, ohjaa servoja
        if (x_mid != -1 && y_mid != -1) {
            if (x_mid > width / 2 + 30) xpos -= angle;  
            if (x_mid < width / 2 - 30) xpos += angle;  
            if (y_mid > height / 2 + 30) ypos -= angle;  
            if (y_mid < height / 2 - 30) ypos += angle;  

            // Servo position limits
            xpos = constrain(xpos, 0, 180);
            ypos = constrain(ypos, 0, 180);

            x.write(xpos);
            y.write(ypos);

            // üîí LUKITUS JA LAUKAISU
            if (abs(x_mid - width / 2) < lockThreshold &&
                abs(y_mid - height / 2) < lockThreshold) {

                if (!locked && millis() - lastTriggerTime > triggerCooldown) {
                    Serial.println("üîí Lukitus saavutettu! üî• Laukaisu tapahtuu!");
                    digitalWrite(triggerPin, HIGH);  // Laukaise signaali
                    delay(500);                     // Pid√§ signaali hetken ajan p√§√§ll√§
                    digitalWrite(triggerPin, LOW);  // Palaa normaalitilaan
                    locked = true;                 // Est√§√§ jatkuvan laukaisun
                    lastTriggerTime = millis();     // P√§ivitt√§√§ viimeisen laukaisuajan
                }
            } else {
                locked = false;  // Palauttaa laukaisun mahdollisuuden
            }
        }

        // Debug-tulostus testaukseen
        Serial.print("Xpos: "); Serial.print(xpos);
        Serial.print("\tYpos: "); Serial.print(ypos);
        Serial.print("\tLukitus: "); Serial.println(locked ? "Kyll√§" : "Ei");

        delay(30);  // Viive tasaisempaan liikkeeseen
    }
}
